<?php Block::put('breadcrumb') ?>
    <ul>
        <li><a href="<?= Backend::url('clake/userextended/roles') ?>">Roles</a></li>
        <li><?= $this->pageTitle ?></li>
    </ul>
<?php Block::endPut() ?>

<!-- Primary content -->
<?php Block::put('body') ?>

    <div class="" style="padding-left:25px;padding-right:25px;">


        <div id="drag_container" class="row" style="margin-top:11px;">

            <div class="col-sm-12 col-md-12 col-lg-5">
                <div class="row">
                    <div class="col-sm-12">
                        <div id="manage_overall_toolbar"><?= $this->makePartial('manage_overall_toolbar', ['group' => $selectedGroup]) ?> </div>

                        <h4>Group Roles</h4>
                        <div id="list_roles_table"><?= $this->makePartial('list_roles_table', ['roles' => $groupRoles['roles']]) ?></div>
                    </div>

                    <div class="col-sm-12" style="margin-top:33px;">
                        <div id="manage_role_toolbar"><?php if(isset($role)): ?><?= $this->makePartial('manage_role_toolbar', ['role' => $role]) ?> <?php endif ?></div>
                        <div id="manage_role_ui"><?php if(isset($role)): ?><?= $this->makePartial('manage_role_ui', ['role' => $role]) ?> <?php endif ?></div>
                    </div>

                </div>

            </div>

            <div class="col-sm-12 col-md-12 col-lg-2 text-center">

                <span style="font-size:19px;font-style:italic;">Groups</span>
                <div id="list_group_buttons" style="margin-top:17px;"><?= $this->makePartial('list_group_buttons', ['groups' => $groups, 'selectedGroup' => $selectedGroup]); ?></div>

            </div>

            <div class="col-sm-12 col-md-12 col-lg-5">
                <div class="row">
                    <div class="col-sm-12">
                        <div id="manage_creation_toolbar"><?= $this->makePartial('manage_creation_toolbar', ['group' => $selectedGroup]) ?> </div>

                        <h4 class="text-right">Unassigned Roles <!--(Drag onto a group to assign)--></h4>
                        <div id="list_roles_table_unassigned"><?= $this->makePartial('list_roles_table_unassigned', ['roles' => $unassignedRoles, 'currentGroupCode' => $selectedGroup]) ?></div>
                    </div>

                    <div class="col-sm-12" style="margin-top:33px;">
                        <div id="manage_group_toolbar"><?= $this->makePartial('manage_group_toolbar', ['group' => $selectedGroup]) ?></div>
                        <div id="manage_users_ui"><?php if(isset($role)) $currentRole = $role; else $currentRole = ''; ?><?= $this->makePartial('manage_users_ui', ['users' => $unassignedUsers, 'group' => $selectedGroup, 'role' => $currentRole]) ?></div>
                    </div>

                </div>

            </div>

        </div>

    </div>


<script>
    interact('.draggable-row')
        .draggable({
            // enable inertial throwing
            inertia: true,
            // keep the element within the area of it's parent

            // enable autoScroll
            autoScroll: true,
            restrict: {
                restriction: "drop_container",
                endOnly: true,
                elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
            },
            // call this function on every dragmove event
            onmove: dragMoveListener,
            onstart: coordSaver,
            onend: resetPos
            // call this function on every dragend event
        });

    function resetPos (event) {
        var target = $(event.target);
        var hasClass = target.hasClass('can-drop');
        if(!hasClass)
        {
            target.css('-webkit-transform', 'none');
            target.css('transform', 'none');
            event.target.setAttribute('data-x', 0);
            event.target.setAttribute('data-y', 0);
        }
    }

    function coordSaver (event) {
        var target = event.target;
        var x = (parseFloat(target.getAttribute('data-x')) || 0);
        var y = (parseFloat(target.getAttribute('data-y')) || 0);
        target.setAttribute('original-x', x);
        target.setAttribute('original-y', y);
    }

    function dragMoveListener (event) {
        var target = event.target,
            // keep the dragged position in the data-x/data-y attributes
            x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

        // translate the element
        target.style.webkitTransform =
            target.style.transform =
                'translate(' + x + 'px, ' + y + 'px)';

        // update the position attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
    }

    // this is used later in the resizing and gesture demos
    //window.dragMoveListener = dragMoveListener;

    function makeDropzone(dropDiv, acceptedClass, ajaxCall)
    {
        interact(dropDiv).dropzone({
            // only accept elements matching this CSS selector
            accept: acceptedClass,
            // Require a 75% element overlap for a drop to be possible
            overlap: 0.5,
            ondrop: function (event) {
                //console.log("Drop Event");
                //console.log($(event.relatedTarget).find('[data-request="onAssignRole"]').data('request-data'));
                var requestData = $(event.relatedTarget).find('[data-request="'+ajaxCall+'"]').data('request-data');
                //console.log(requestData);
                var requestDataSubArr = requestData.split(',');
                //console.log(JSON.stringify(requestDataSubArr));

                var request = {};
                for(var i = 0; i < requestDataSubArr.length; i++)
                {
                    //console.log(requestDataSubArr[i].split('\'').join(''));
                    var split = requestDataSubArr[i].split('\'').join('').split(':');
                    request[split[0].trim()] = split[1].trim();
                }

                //console.log(JSON.stringify(request));

                $.request(ajaxCall, {data: request}, {success: function(data) {
                    //... do something ...
                    this.success(data);
                }});
                //$.request('onAssignRole', {data: {roleCode: }});
                //event.relatedTarget.textContent = 'Dropped';
            },
            ondragenter: function(event) {
                event.relatedTarget.classList.add('can-drop');
            },
            ondragleave: function (event) {
                event.relatedTarget.classList.remove('can-drop');
            }
        });
    }

    $(function() {
        makeDropzone('#list_roles_container', '.drag-unassigned-role', 'onAssignRole');
        makeDropzone('#list_unassigned_roles_container', '.drag-role', 'onUnassignRole');
    });

    //'.drag-unassigned-role'
    //   'onAssignRole'
    // '#list_roles_container'
</script>

<?php Block::endPut() ?>
